# We assume that assembly on Module PCB position 1 will use ETROC+LGAD subassemblies
# on position 1, 5, 9, and 13 (ie row 1), while Module PCB position 2 will use 
# positions 2, 6, 10, and 14, and so on for Module PCB position 3 and 4

VERSION v2.5
SETLOG TP_ETROC_Assy_{timestamp}.txt
CLEARLOG
LOADCONFIG
LOADCONFIG "" Scripts\ETLModules\ThroughPut\TP_Config.txt
LOADCONFIG "" Config\ETL\TP_Site_Config.txt

COPY $neg45 -45   # Used in the condition of the extra head rotation mitigation block.
FLEXREAD $high_int default.light_high_int 40
FLEXREAD $low_int default.light_low_int 40

DIALOG Scripts\ETLModules\Throughput\Assembly_Setup_Dialog.ini

COPY $etroc_chuck_num &chuck_number.top

HOME if-needed

PRINT "Assembly Start"

SETVAC etl_chuck_{$pcb_chuck_num} 1  # vacuum for assembly plate
MOVENAME etl_chuck_{$pcb_chuck_num}

COPY $mod_idx 0
@PCB_SURVEY_LOOP_START
    INC $mod_idx $mod_idx
    GOTOIF @PCB_SURVEY_LOOP_END `$mod_idx>4`
    GOTOIFN @PCB_SURVEY_LOOP_START &enabled_{$mod_idx}
    PRINT "Begin Survey of Module PCB %d, ID=%d" $mod_idx &id_{$mod_idx}

    CALL @SURVEY_PART_FROM_CONFIG $pcb_chuck_num $mod_idx 1 -> $pos $rot
    COPY &pcb_init_pos_{$mod_idx} $pos
    COPY &pcb_init_rot_{$mod_idx} $rot

    TRANSFORML2G &etroc_target_pos_{$mod_idx}_1 &geometry.Module_PCB.A $pos $rot
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_2 &geometry.Module_PCB.B $pos $rot
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_3 &geometry.Module_PCB.C $pos $rot
    TRANSFORML2G &etroc_target_pos_{$mod_idx}_4 &geometry.Module_PCB.D $pos $rot

    GOTO @PCB_SURVEY_LOOP_START
@PCB_SURVEY_LOOP_END

MOVENAME "etl_chuck_{$etroc_chuck_num}"

COPY $mod_idx 0
@ETROC_SURVEY_LOOP_START
    INC $mod_idx $mod_idx
    GOTOIF @ETROC_SURVEY_LOOP_END `$mod_idx>4`
    GOTOIFN @ETROC_SURVEY_LOOP_START &enabled_{$mod_idx}
    PRINT "Begin Survey of ETROCs for Module %d, ID=%d" $mod_idx &id_{$mod_idx}

    COPY $chip_idx 0
    @ETROC_SURVEY_INNER_LOOP_START
        INC $chip_idx $chip_idx
        GOTOIF @ETROC_SURVEY_INNER_LOOP_END `$chip_idx>4`

        MUL $loc_offset 4 `$chip_idx-1`
        ADD $chip_loc $loc_offset $mod_idx 
        SETVAC etl_chuck_{$etroc_chuck_num}_pos_{$chip_loc} 1
        CALL @SURVEY_PART_FROM_CONFIG $etroc_chuck_num $chip_loc 2 -> $pos $rot

        COPY $rot_fixed $rot
        GOTOIF @FIX_ROT_SKIP `$chip_idx>2`
        CALL @FIX_ROT $rot -> $rot_fixed
        @FIX_ROT_SKIP

        COPY &etroc_init_pos_{$chip_loc} $pos
        COPY &etroc_init_rot_{$chip_loc} $rot_fixed
        COPY &etroc_init_pos_num_{$mod_idx}_{$chip_idx} $chip_loc

        GOTOIFN @ETROC_SURVEY_INNER_LOOP_START &do_lgad_survey
        COPY $lgad_loc_pos {0,0,-0.4}
        TRANSFORML2G $lgad_target_pos $lgad_loc_pos $pos $rot
        COPY $lgad_target_rot $rot
        CALL @SURVEY_PART $lgad_target_pos $lgad_target_rot 3 -> $lgad_pos $lgad_rot
        CALL @PRINT_SURVEY_RESULTS $lgad_target_pos $lgad_target_rot $lgad_pos $lgad_rot $chip_loc

        GOTO @ETROC_SURVEY_INNER_LOOP_START
    @ETROC_SURVEY_INNER_LOOP_END


    GOTO @ETROC_SURVEY_LOOP_START
@ETROC_SURVEY_LOOP_END

SETLIGHT 0
LOADTOOL etl_picker_tool

COPY $mod_idx 0
@ASSY_LOOP_START
    INC $mod_idx $mod_idx
    GOTOIF @ASSY_LOOP_END `$mod_idx>4`
    GOTOIFN @ASSY_LOOP_START &enabled_{$mod_idx}
    PRINT "Begin pick-and-place for Module %d, ID=%d" $mod_idx &id_{$mod_idx}

    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 1    
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 2    
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 3    
    CALL @PICK_AND_PLACE $pcb_chuck_num $mod_idx $etroc_chuck_num 4    

    GOTO @ASSY_LOOP_START
@ASSY_LOOP_END

UNLOADTOOL

SETVAC etl_chuck_{$pcb_chuck_num} 0  # vacuum for assembly plate

PRINT "Assembly Completed"
MOVENAME home
END


@PICK_AND_PLACE(pcb_chuck_num,pcb_pos_num,etroc_chuck_num,etroc_pos_num)
#Arguments
#    pcb_chuck_num = chuck number of the Module PCB
#    pcb_pos_num = position number of the Module PCB
#    etroc_chuck_num = chuck number of ETROC+LGAD subasssemblies
#    etroc_pos_num = position on the module PCB (1-4)
    FLEXREAD $top_thickness thickness.top

    #Puts relative alignment of subassemblies in gantry coordinates using Module PCB position

    COPY $pcb_pos &pcb_init_pos_{$pcb_pos_num}
    COPY $pcb_rot &pcb_init_rot_{$pcb_pos_num}
    COPY $etroc_init_pos_num &etroc_init_pos_num_{$pcb_pos_num}_{$etroc_pos_num}
    COPY $etroc_init_pos &etroc_init_pos_{$etroc_init_pos_num}
    COPY $etroc_init_rot &etroc_init_rot_{$etroc_init_pos_num}

    COPY $etroc_target_pos &etroc_target_pos_{$pcb_pos_num}_{$etroc_pos_num}

    # Extra head rotation mitigation between UNL and FNAL.
    GOTOIF @PCB_ROT_NO_CHANGE `$pcb_rot>$neg45`
    ADD $etroc_init_rot $etroc_init_rot 90
    ADD $pcb_rot $pcb_rot 90
    @PCB_ROT_NO_CHANGE

    MOVENAME etl_chuck_{$etroc_chuck_num} "" direct
    PICKPART $etroc_init_pos $etroc_init_rot etl_chuck_{$etroc_chuck_num}_pos_{$etroc_init_pos_num}
    MOVENAME etl_chuck_{$pcb_chuck_num} "" direct
    PLACEPART $etroc_target_pos $pcb_rot

    RETURN


@PRINT_SURVEY_RESULTS(target_pos,target_rot,meas_pos,meas_rot,chip_num)
    PRINT "CHIP %d:" $chip_num
    PRINT "    target: %v | %f deg" $target_pos $target_rot
    PRINT "    actual: %v | %f deg" $meas_pos $meas_rot
    SUB $pos_err $meas_pos $target_pos
    SUB $rot_err $meas_rot $target_rot
    PRINT "    delta:  %v | %f deg" $pos_err $rot_err
    RETURN


@SURVEY_PART_FROM_CONFIG(chuck_num,pos_num,part_id)
    # Arguments:
    #  $chuck_num - 
    #  $pos_num - 
    #   part_id=1 => Module PCB
    #   part_id=2 => ETROC
    #   part_id=3 => LGAD
    # Returns
    #  $pos - center of part
    #  $phi - rotation of part in x-y plane

    SETLIGHT $high_int

    GOTOIF @SPC_MODULE_PCB `$part_id==1`
    GOTOIF @SPC_ETROC `$part_id==2`
    GOTOIF @SPC_LGAD `$part_id==3`
    
    @SPC_MODULE_PCB
      COPY $pos_default &default.Module_PCB.{$chuck_num}.{$pos_num}.pos
      COPY $rot_default &default.Module_PCB.{$chuck_num}.{$pos_num}.rot
    GOTO @SPC_END_LOAD

    @SPC_ETROC
      COPY $pos_default &default.ETROC.{$chuck_num}.{$pos_num}.pos
      COPY $rot_default &default.ETROC.{$chuck_num}.{$pos_num}.rot
    GOTO @SPC_END_LOAD
    
    @SPC_LGAD
      COPY $pos_default &default.LGAD.{$chuck_num}.{$pos_num}.pos
      COPY $rot_default &default.LGAD.{$chuck_num}.{$pos_num}.rot
    @SPC_END_LOAD

    CALL @SURVEY_PART $pos_default $rot_default $part_id -> $pos $phi
    RETURN $pos $phi


@SURVEY_PART(pos_default,rot_default,part_id)
    # Arguments:
    #  $chuck_num - 
    #  $pos_num - 
    #   part_id=1 => Module PCB
    #   part_id=2 => ETROC
    #   part_id=3 => LGAD
    # Returns
    #  $pos - center of part
    #  $phi - rotation of part in x-y plane

    GOTOIF @SP_MODULE_PCB `$part_id==1`
    GOTOIF @SP_ETROC `$part_id==2`
    GOTOIF @SP_LGAD `$part_id==3`
    
    @SP_MODULE_PCB
      COPY $tr_local &geometry.Module_PCB.fid_tr  
      COPY $tl_local &geometry.Module_PCB.fid_tl
      COPY $bl_local &geometry.Module_PCB.fid_bl
      COPY $br_local &geometry.Module_PCB.fid_br
    GOTO @SP_END_LOAD

    @SP_ETROC
      COPY $tr_local &geometry.ETROC.fid_tr  
      COPY $tl_local &geometry.ETROC.fid_tl
      COPY $bl_local &geometry.ETROC.fid_bl
      COPY $br_local &geometry.ETROC.fid_br
    GOTO @SP_END_LOAD
    
    @SP_LGAD
      COPY $tr_local &geometry.LGAD.fid_tr  
      COPY $tl_local &geometry.LGAD.fid_tl
      COPY $bl_local &geometry.LGAD.fid_bl
      COPY $br_local &geometry.LGAD.fid_br
    @SP_END_LOAD


    #converts the local coordinates to global gantry coordinates usint start location and orientation
    TRANSFORML2G $tr_global $tr_local $pos_default $rot_default
    TRANSFORML2G $tl_global $tl_local $pos_default $rot_default
    TRANSFORML2G $bl_global $bl_local $pos_default $rot_default
    TRANSFORML2G $br_global $br_local $pos_default $rot_default

    #this is to get corrected centers and orientation, the code above gives general area
    CALL @ACQUIREFIDUCIAL $tr_global $part_id 1 -> $tr_corrected
    CALL @ACQUIREFIDUCIAL $br_global $part_id 2 -> $br_corrected
    CALL @ACQUIREFIDUCIAL $tl_global $part_id 4 -> $tl_corrected
    CALL @ACQUIREFIDUCIAL $bl_global $part_id 3 -> $bl_corrected

    # Turns measured corners or fiducials into center and orientation
    GOTOIF @FIT_MODULE_PCB `$part_id==1`
    GOTOIF @FIT_ETROC `$part_id==2`
    GOTOIF @FIT_LGAD `$part_id==3`

    @FIT_MODULE_PCB
      FIT $pos $rot $_ Module_PCB $tr_corrected $br_corrected $bl_corrected $tl_corrected
      GOTO @FINISH_SURVEY
    @FIT_ETROC
      FIT $pos $rot $_ ETROC $tr_corrected $br_corrected $bl_corrected $tl_corrected
      GOTO @FINISH_SURVEY
    @FIT_LGAD
      FIT $pos $rot $_ LGAD $tr_corrected $br_corrected $bl_corrected $tl_corrected

    @FINISH_SURVEY
    QUAT2EULER $phi $_ $_ $rot
    RETURN $pos $phi

@ACQUIREFIDUCIAL(start_pos,part_id,loc)
    # Arguments:
    #  $start_pos - Position to initially search for the fiducial
    #  $piece - PCB or ETROC, 1 or 2 respectively
    #  $loc - tr == 1, br == 2, bl == 3, tl == 4
    MOVETO $start_pos 100

    # GOTO @manual_fiducial_acquisition
    COPY &vision.autofocus.step_size 0.1
    SETLIGHT $low_int
    AUTOFOCUS $_ 1 "" autoclose
    SETLIGHT $high_int

    SETERRORMODE setvar
    WAIT 50
    FINDFID $fid_position etl_throughput_etroc
    GOTOIF @manual_fiducial_acquisition $ERR
    SETERRORMODE default
    RETURN $fid_position
    
    @manual_fiducial_acquisition
    SETERRORMODE default
    SETLIGHT $low_int
    VIDEO
    SETLIGHT $high_int
    getpos $fid_position
    RETURN $fid_position


@FIX_ROT(rot)
    #Arguments:
    #  rot - rotation that needs to be fixed due to calculation falling outside atan2's range
    GOTOIF @POS `$rot>=0`
    ADD $rot $rot 180 #not positive so add 180
    RETURN $rot

    @POS
    SUB $rot $rot 180 #This is positive so subtract 180
    RETURN $rot


